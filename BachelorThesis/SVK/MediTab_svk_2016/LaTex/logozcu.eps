%!PS-Adobe-3.0
%Produced by poppler pdftops version: 0.18.3 (http://poppler.freedesktop.org)
%%Creator: cairo 1.8.8 (http://cairographics.org)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%DocumentMedia: plain 141 71 0 () ()
%%BoundingBox: 0 0 141 71
%%Pages: 1
%%EndComments
%%BeginDefaults
%%PageMedia: plain
%%EndDefaults
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2004 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq pdfPatternCS not and {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne pdfPatternCS or {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
141 71 false pdfSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageOrientation: Portrait
pdfStartPage
0 0 141 71 re W
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
/DeviceRGB {} cs
[0.1569 0.3412 0.6863] sc
47.094 43.495 m
47.094 27.132 l
61.262 35.319 l
47.094 43.495 l
h
f
0 -0.001 m
20.598 11.893 l
14.844 13.819 10.703 18.097 10.633 25.499 c
10.633 49.979 l
21.227 49.979 l
21.227 26.026 l
21.387 21.147 23.934 18.077 28.914 18.077 c
30.324 18.077 31.531 18.335 32.551 18.792 c
33.664 19.44 l
35.523 20.784 36.504 23.073 36.602 26.026 c
36.602 49.722 l
36.625 49.722 l
0 70.866 l
0 -0.001 l
h
f
71.012 49.511 m
75.285 49.511 l
75.285 48.226 l
72.301 43.507 l
75.352 43.507 l
75.352 42.417 l
70.875 42.417 l
70.875 43.714 l
73.852 48.417 l
71.012 48.417 l
71.012 49.511 l
h
f
79.387 48.143 m
79.367 48.143 l
78.691 45.081 l
80.109 45.081 l
79.387 48.143 l
h
80.859 50.933 m
79.484 49.866 l
78.477 49.866 l
79.359 50.933 l
80.859 50.933 l
h
76.531 42.417 m
78.492 49.511 l
80.449 49.511 l
82.371 42.417 l
80.812 42.417 l
80.418 43.991 l
78.398 43.991 l
77.996 42.417 l
76.531 42.417 l
h
f
85.449 46.397 m
86.27 46.397 l
86.711 46.397 87.016 46.878 87.016 47.351 c
87.016 47.929 86.859 48.417 86.195 48.417 c
85.449 48.417 l
85.449 46.397 l
h
83.965 49.511 m
86.633 49.511 l
87.988 49.511 88.52 48.686 88.52 47.386 c
88.52 46.585 88.281 45.308 86.547 45.308 c
85.449 45.308 l
85.449 42.417 l
83.965 42.417 l
83.965 49.511 l
h
f
92.121 48.143 m
92.105 48.143 l
91.426 45.081 l
92.84 45.081 l
92.121 48.143 l
h
89.266 42.417 m
91.23 49.511 l
93.18 49.511 l
95.109 42.417 l
93.547 42.417 l
93.152 43.991 l
91.133 43.991 l
90.727 42.417 l
89.266 42.417 l
h
f
98.199 43.507 m
98.918 43.507 l
99.82 43.507 99.996 44.186 99.996 45.964 c
99.996 47.268 99.996 48.417 98.965 48.417 c
98.199 48.417 l
98.199 43.507 l
h
96.715 49.511 m
99.191 49.511 l
101.141 49.511 101.5 48.214 101.5 46.007 c
101.5 44.917 101.668 42.417 99.129 42.417 c
96.715 42.417 l
96.715 49.511 l
h
f
106.891 45.964 m
106.891 47.784 106.781 48.569 105.949 48.569 c
105.109 48.569 105.004 47.784 105.004 45.964 c
105.004 44.147 105.109 43.362 105.949 43.362 c
106.781 43.362 106.891 44.147 106.891 45.964 c
103.504 45.964 m
103.504 47.843 103.504 49.628 105.949 49.628 c
108.395 49.628 108.395 47.843 108.395 45.964 c
108.395 44.104 108.395 42.3 105.949 42.3 c
103.504 42.3 103.504 44.104 103.504 45.964 c
f
113.496 50.933 m
114.609 50.933 l
113.613 49.866 l
111.996 49.866 l
111.004 50.933 l
112.113 50.933 l
112.812 50.354 l
113.496 50.933 l
h
110.387 45.964 m
110.387 47.843 110.387 49.628 112.828 49.628 c
114.344 49.628 114.953 48.792 114.891 47.268 c
113.438 47.268 l
113.438 48.214 113.273 48.569 112.828 48.569 c
111.996 48.569 111.887 47.78 111.887 45.964 c
111.887 44.147 111.996 43.358 112.828 43.358 c
113.516 43.358 113.488 44.249 113.508 44.808 c
114.969 44.808 l
114.969 42.909 114.211 42.3 112.828 42.3 c
110.387 42.3 110.387 44.104 110.387 45.964 c
f
116.797 42.417 m
116.797 49.511 l
120.668 49.511 l
120.668 48.417 l
118.277 48.417 l
118.277 46.671 l
120.48 46.671 l
120.48 45.581 l
118.277 45.581 l
118.277 43.507 l
120.742 43.507 l
120.742 42.417 l
116.797 42.417 l
h
f
124.512 42.3 m
122.68 42.3 122.332 43.382 122.414 44.608 c
123.895 44.608 l
123.895 43.933 123.922 43.362 124.738 43.362 c
125.238 43.362 125.484 43.686 125.484 44.167 c
125.484 45.444 122.5 45.522 122.5 47.632 c
122.5 48.745 123.035 49.628 124.836 49.628 c
126.281 49.628 127 48.979 126.902 47.495 c
125.453 47.495 l
125.453 48.026 125.367 48.569 124.773 48.569 c
124.285 48.569 124.004 48.3 124.004 47.811 c
124.004 46.468 126.988 46.585 126.988 44.354 c
126.988 42.518 125.645 42.3 124.512 42.3 c
f
132.082 49.511 m
133.715 49.511 l
131.73 46.331 l
133.715 42.417 l
132.043 42.417 l
130.344 46.054 l
130.324 46.054 l
130.324 42.417 l
128.844 42.417 l
128.844 49.511 l
130.324 49.511 l
130.324 46.476 l
130.344 46.476 l
132.082 49.511 l
h
f
137.59 48.143 m
137.57 48.143 l
136.895 45.081 l
138.309 45.081 l
137.59 48.143 l
h
139.062 50.933 m
137.688 49.866 l
136.676 49.866 l
137.562 50.933 l
139.062 50.933 l
h
134.734 42.417 m
136.695 49.511 l
138.652 49.511 l
140.574 42.417 l
139.016 42.417 l
138.621 43.991 l
136.598 43.991 l
136.195 42.417 l
134.734 42.417 l
h
f
75.836 35.335 m
75.836 30.308 l
75.836 29.245 75.234 28.128 73.434 28.128 c
71.801 28.128 71.016 28.972 71.016 30.308 c
71.016 35.335 l
72.5 35.335 l
72.5 30.405 l
72.5 29.53 72.871 29.19 73.414 29.19 c
74.055 29.19 74.352 29.62 74.352 30.405 c
74.352 35.335 l
75.836 35.335 l
h
f
77.934 28.245 m
77.934 35.331 l
79.938 35.331 l
81.816 30.425 l
81.836 30.425 l
81.836 35.331 l
83.223 35.331 l
83.223 28.245 l
81.27 28.245 l
79.34 33.429 l
79.316 33.429 l
79.316 28.245 l
77.934 28.245 l
h
f
85.355 28.245 1.481 7.09 re
f
88.398 35.335 m
89.941 35.335 l
91.035 30.179 l
91.055 30.179 l
92.293 35.335 l
93.754 35.335 l
91.883 28.245 l
90.145 28.245 l
88.398 35.335 l
h
f
95.301 28.245 m
95.301 35.331 l
99.176 35.331 l
99.176 34.241 l
96.785 34.241 l
96.785 32.495 l
98.988 32.495 l
98.988 31.405 l
96.785 31.405 l
96.785 29.335 l
99.25 29.335 l
99.25 28.245 l
95.301 28.245 l
h
f
102.547 32.272 m
103.203 32.272 l
103.797 32.272 103.965 32.858 103.965 33.311 c
103.965 33.987 103.676 34.241 103.203 34.241 c
102.547 34.241 l
102.547 32.272 l
h
102.547 28.245 m
101.066 28.245 l
101.066 35.331 l
103.805 35.331 l
104.816 35.331 105.461 34.683 105.461 33.476 c
105.461 32.577 105.109 31.897 104.145 31.741 c
104.145 31.718 l
104.473 31.679 105.434 31.601 105.434 30.327 c
105.434 29.874 105.461 28.538 105.602 28.245 c
104.145 28.245 l
103.953 28.679 103.988 29.159 103.988 29.62 c
103.988 30.464 104.07 31.183 102.93 31.183 c
102.547 31.183 l
102.547 28.245 l
h
f
107.168 35.335 m
111.441 35.335 l
111.441 34.05 l
108.457 29.335 l
111.508 29.335 l
111.508 28.245 l
107.035 28.245 l
107.035 29.538 l
110.008 34.241 l
107.168 34.241 l
107.168 35.335 l
h
f
113.227 28.245 1.484 7.09 re
f
121.055 35.335 m
121.055 34.151 l
119.406 34.151 l
119.406 28.245 l
117.926 28.245 l
117.926 34.151 l
116.277 34.151 l
116.277 35.335 l
121.055 35.335 l
h
f
124.359 33.968 m
124.34 33.968 l
123.656 30.905 l
125.066 30.905 l
124.359 33.968 l
h
121.5 28.245 m
123.461 35.331 l
125.414 35.331 l
127.336 28.245 l
125.777 28.245 l
125.383 29.815 l
123.363 29.815 l
122.961 28.245 l
121.5 28.245 l
h
f
70.734 21.155 m
72.273 21.155 l
73.371 16.007 l
73.391 16.007 l
74.621 21.155 l
76.082 21.155 l
74.211 14.081 l
72.477 14.081 l
70.734 21.155 l
h
f
82.176 18.046 m
83 18.046 l
83.441 18.046 83.746 18.53 83.746 18.999 c
83.746 19.581 83.594 20.069 82.922 20.069 c
82.176 20.069 l
82.176 18.046 l
h
80.703 21.155 m
83.363 21.155 l
84.719 21.155 85.246 20.331 85.246 19.042 c
85.246 18.233 85.008 16.96 83.273 16.96 c
82.176 16.96 l
82.176 14.081 l
80.703 14.081 l
80.703 21.155 l
h
f
86.293 14.081 m
86.293 21.155 l
87.773 21.155 l
87.773 15.261 l
89.988 15.261 l
89.988 14.081 l
86.293 14.081 l
h
f
91.25 21.155 m
95.512 21.155 l
95.512 19.87 l
92.535 15.167 l
95.586 15.167 l
95.586 14.081 l
91.113 14.081 l
91.113 15.374 l
94.082 20.069 l
91.25 20.069 l
91.25 21.155 l
h
f
97.305 14.081 m
97.305 21.155 l
99.309 21.155 l
101.188 16.257 l
101.211 16.257 l
101.211 21.155 l
102.586 21.155 l
102.586 14.081 l
100.637 14.081 l
98.707 19.253 l
98.691 19.253 l
98.691 14.081 l
97.305 14.081 l
h
f
104.715 14.081 1.48 7.074 re
f
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
